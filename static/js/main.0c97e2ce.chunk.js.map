{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","cols","autoFocus","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0c97e2ce.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button> \r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string };\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About Textutils'\r\n};","import React ,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        //console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        //console.log(\"Lowercase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        //console.log(\"Lowercase was clicked\");\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Textarea is clear!\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        //console.log(\"On change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 99999); /* For mobile devices */\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard!\",\"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra space removed!\",\"success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className='form-Control' value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"mybox\" rows='8'cols=\"150\" autoFocus></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} Words {text.length} Characters</p>\r\n            <p>{ 0.008 * text.split(\" \").length} Minutes read.</p>\r\n            <h2>Preview</h2>\r\n            {/* <p>{text}</p> */}\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enable\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enable\", \"success\")\n      document.title = \"TextUtils - Light Mode\";\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter the Text to analyze below!\" mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}